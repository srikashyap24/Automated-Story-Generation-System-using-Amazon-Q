import boto3
import json
import hashlib
import os

def lambda_handler(event, context):

        # Initialize the bedrock-runtime boto3 client
        bedrock_runtime = boto3.client('bedrock-runtime', region_name='us-east-1')

        # Get the BUCKET_NAME and TABLE_NAME from Environment variables.
        BUCKET_NAME = os.environ['BUCKET_NAME']
        TABLE_NAME = os.environ['TABLE_NAME']

        # Set MODEL_ID = amazon.nova-pro-v1:0
        MODEL_ID = "amazon.nova-pro-v1:0"

        # Define your user message as multi-line string
        user_message = """Write a children's short story. Include a title and make it less than 500 words.
        The output needs to be JSON formatted"""

   
        # Prepare the request payload
        try:
            request_payload = {
                "messages": [
                    {
                        "role": "user",
                        "content": [{"text": user_message}]
                    }
                ],
                "inferenceConfig": {
                    "temperature": 0.7,
                    "topP": 0.9,
                    "maxTokens": 512
                }
            }
        except NameError as e:
            error_response = {
                "statusCode": 500,
                "body": f"NameError: {str(e)}."
            }
            return error_response
        
        try:
            # Invoke the model
            response = bedrock_runtime.invoke_model(
                modelId=MODEL_ID,
                body=json.dumps(request_payload)
            )
 
            # Parse response_body and print the story from ['output']['message']['content'][0]['text']
            response_body = json.loads(response['body'].read())
            story = response_body['output']['message']['content'][0]['text']
            print(story)

            # Store the title and story in variables
            data = json.loads(story)
            title = data['title']
            story = data['story']

            # Create a random 10 character uid
            uid = hashlib.md5(title.encode()).hexdigest()[:10]

            # Put the story in S3 BUCKET_NAME as a text file using the uid as the filename
            s3 = boto3.client('s3')
            s3.put_object(Bucket=BUCKET_NAME, Key=f"{uid}.txt", Body=story)

            '''DIY Solution'''
            # Store title uid and bucket name in DynamoDB TABLE_NAME 
            dynamodb = boto3.client('dynamodb')
            dynamodb.put_item(
                TableName=TABLE_NAME,
                Item={
                    'title': {'S': title},
                    'uid': {'S': uid},
                    'bucket': {'S': BUCKET_NAME}
                }
            )
            '''DIY Solution'''

        # Return a success response with message
            return {
                'statusCode': 200,
                'body': f"Story saved to S3: {uid}.txt"
            }
        
        except Exception as e:
            return {
                'statusCode': 501,
                'body': json.dumps(f"Error: {str(e)}")
            }

